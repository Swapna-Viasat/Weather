package com.swapna.weatherforecast;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ListView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;




/**
 * Created by swapna on 30/10/2017.
 */

public class WeatherActivity extends AppCompatActivity {
    private List<Weather> weatherList = new ArrayList<>();


    private WeatherArrayAdapter weatherArrayAdapter;
    private ListView weatherListView; // displays weather info

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // autogenerated code to inflate layout and configure Toolbar
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        weatherListView = (ListView) findViewById(R.id.weatherListView);
        weatherArrayAdapter = new WeatherArrayAdapter(this, weatherList);
        weatherListView.setAdapter(weatherArrayAdapter);

        FloatingActionButton fab =
                (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(fabClickListener);
    }
    private void dismissKeyboard(View view) {
        InputMethodManager imm = (InputMethodManager) getSystemService(
                Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    // create openweathermap.org web service URL using city
    private URL createURL(String city) {
        String apiKey = getString(R.string.api_key);
        String baseUrl = getString(R.string.web_service_url);

        try {
            // create URL for specified city and imperial units (Fahrenheit)
            String urlString = baseUrl + URLEncoder.encode(city, "UTF-8") +
                    "&units=imperial&cnt=5&APPID=" + apiKey;
            return new URL(urlString);
        }
        catch (Exception e) {
            e.printStackTrace();
        }

        return null; // URL was malformed
    }

    private class GetWeatherTask
            extends AsyncTask<URL, Void, JSONObject> {

        @Override
        protected JSONObject doInBackground(URL... params) {
            HttpURLConnection connection = null;
            try {
                connection = (HttpURLConnection) params[0].openConnection();
                int response = connection.getResponseCode();
                if (response == HttpURLConnection.HTTP_OK) {
                    StringBuilder builder = new StringBuilder();
                    InputStreamReader streamReader = new InputStreamReader(connection.getInputStream());
                    try (BufferedReader reader = new BufferedReader(streamReader)) {
                        String inputStr;
                        while ((inputStr = reader.readLine()) != null)
                            builder.append(inputStr);

                        JSONObject jsonResponse = new JSONObject(builder.toString());
                        System.out.println("Return JSON obeject successful"+jsonResponse);
                        return jsonResponse;
                    }
                    catch (IOException e){
                        Log.e("Network Response", "Exception Caught", e);
                    }
                    //      JSONObject jsonResponse = new JSONObject();// finish this line

                }
                else { // you need to finish this block
                    Log.i("In Activity","Connection failed");
                }
            }
            catch (Exception e){// you need to finish this block
                Log.e("Network Response", "Exception Caught", e);
            }
            finally{
                connection.disconnect();
            }
// END YOUR CODE HERE
            return null;
        }

        // process JSON response and update ListView
        @Override
        protected void onPostExecute(JSONObject weather) {
            if(weather != null) {
                convertJSONtoArrayList(weather); // repopulate weatherList
            }
            weatherArrayAdapter.notifyDataSetChanged(); // rebind to ListView
            weatherListView.smoothScrollToPosition(0); // scroll to top
        }
    }

    // create Weather objects from JSONObject containing the forecast
    private void convertJSONtoArrayList(JSONObject forecast) {
        weatherList.clear(); // clear old weather data
        // ADD YOUR CODE HERE
        try{
            JSONArray list = forecast.getJSONArray("list");
            //convert each element of list to a Weather object
            if(list != null) {
                for (int i = 0; i < list.length(); ++i) {
                    JSONObject day = list.getJSONObject(i); //get one day's data
                    // get the day's temperatires ("temp") JSONObject
                    JSONObject temperatures = day.getJSONObject("temp");
                    //get day's "weather" JSONObject fir the description and icon
                    JSONObject weather =
                            day.getJSONArray("weather").getJSONObject(0);
                    // add new Weather onject to weatherlist
                    weatherList.add(new Weather(
                            day.getLong("dt"), //date/tome timestamp
                            temperatures.getDouble("min"), //minimum temperature
                            temperatures.getDouble("max"), // maximum temperature
                            day.getDouble("humidity"), // percent humidity
                            weather.getString("description"), //weather conditions
                            weather.getString("icon"))); //icon name
                }
            }
        }
        catch (JSONException e){
            e.printStackTrace();
        }
        // END YOUR CODE HERE
    }
    private final View.OnClickListener fabClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            // get text from locationEditText and create web service URL
            EditText locationEditText =
                    (EditText) findViewById(R.id.locationEditText);
            String city = locationEditText.getText().toString();
            URL url = createURL(city);

            // hide keyboard and initiate a GetWeatherTask to download
            // weather data from OpenWeatherMap.org in a separate thread
            if (url != null) {
                dismissKeyboard(locationEditText);
                WeatherActivity.GetWeatherTask getLocalWeatherTask = new WeatherActivity.GetWeatherTask();
                getLocalWeatherTask.execute(url);
            }
            else {
                Snackbar.make(findViewById(R.id.coordinatorLayout),
                        R.string.invalid_url, Snackbar.LENGTH_LONG).show();
            }
        }
    };
}

